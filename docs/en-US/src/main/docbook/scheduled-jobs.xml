<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="scheduled-jobs">
  <title>Scheduled Jobs</title>

  <section id="what-are-scheduled-jobs">
    <title>What Are Scheduled Jobs?</title>

    <para>Scheduled jobs are simply components that execute on a
    possibly-recurring schedule instead of in response to user interaction.
    Scheduled jobs fire asynchronously, outside of the normal web-browser
    thread-of-control. Scheduled jobs have full access to the entire Ruby
    environment. This allows them to interact with database models and other
    application functionality.</para>
  </section>

  <section id="ruby-job-classes">
    <title>Ruby Job Classes</title>

    <para>Each scheduled job maps to exactly one Ruby class. The path and
    filename should match the class name of the job contained in the
    file.</para>

    <informaltable>
      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">File name</entry>

            <entry align="center">Class name</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><filename>mail_notifier.rb</filename></entry>

            <entry><type>MailNotifier</type></entry>
          </row>

          <row>
            <entry><filename>mail/notifier.rb</filename></entry>

            <entry><type>Mail::Notifier</type></entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para><example>
        <title>Skeleton scheduled job class
        (<filename>mail/notifier.rb</filename>)</title>

        <para><programlisting>module Mail
  class Notifier

    # implementation goes here

  end
end</programlisting></para>
      </example>Each job class should implement a no-argument
    <methodname>run()</methodname> method to perform the work when
    fired.</para>

    <para><example>
        <title>Scheduled job implementation
        (<filename>mail/notifier.rb</filename>)</title>

        <para><programlisting>module Mail
  class Notifier

    def run()

      # perform work here

    end

  end
end</programlisting></para>
      </example></para>

    <para>From within the class's <methodname>run()</methodname> method, the
    full application environment is available.</para>
  </section>

  <section id="scheduling-jobs">
    <title>Scheduling Jobs</title>

    <para>The job schedule defines the time(s) that a job should execute. This
    may be defined to be single point in time, or more often, as recurring
    event. The job schedule is defined with a jobs section of your
    <filename>torquebox.yml</filename>.</para>

    <section id="jobs-yaml-format">
      <title>YAML Configuration Format</title>

      <para>Within the global torquebox.yml descriptor (or through an external
      *-knob.yml descriptor), scheduled jobs are configured using the a
      <parameter>jobs:</parameter> section.</para>

      <para>Within the <parameter>jobs</parameter>, a block of information is
      provided for each job. The block starts with arbitrary name for the job.
      Each block must also define the job class and the schedule
      specification. Optionally a description may be provided.</para>

      <para><example>
          <title>Example <filename>torquebox.yml</filename></title>

          <para><programlisting>application:
  ..
jobs:
  mail.notifier:
    job:         Mail::Notifier
    cron:        '0 */5 * * * ?'
    description: Deliver queued mail notifications</programlisting></para>
        </example></para>

      <para>The cron attribute should contain a typical crontab-like entry. It
      is composed of 7 fields (6 are required).</para>

      <para><informaltable>
          <tgroup cols="7">
            <thead>
              <row>
                <entry align="center">Seconds</entry>

                <entry align="center">Minutes</entry>

                <entry align="center">Hours</entry>

                <entry align="center">Day of Month</entry>

                <entry align="center">Month</entry>

                <entry align="center">Day of Week</entry>

                <entry align="center">Year</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>0-59</entry>

                <entry>0-59</entry>

                <entry>0-23</entry>

                <entry>1-31</entry>

                <entry>1-2 or JAN-DEC</entry>

                <entry>1-7 or SUN-SAT</entry>

                <entry>1970-2099 (optional)</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>

      <para>For several fields, you may denote subdivision by using the
      forward-slash (<code>/</code>) character. To execute a task every 5
      minutes, <code>*/5</code> in the minutes field would specify this
      condition.</para>

      <para>Spans may be indicated using the dash (<code>-</code>) character.
      To execute a task Monday through Friday, <code>MON-FRI</code> should be
      used in the day-of-week field.</para>

      <para>Multiple values may be separated using the comma (<code>,</code>)
      characeter. The specification of <code>1,15</code> in the day-of-month
      field would result in the job firing on the 1st and 15th of each
      month.</para>

      <para>Either day-of-month or day-of-week must be specified using the
      <code>?</code> character, since specifying both is contradictory.</para>
    </section>
  </section>

  <section id="resouce-injection-with-jobs">
    <title>Resource Injection with Jobs</title>

    <para>If a job requires access to other resources, such as messaging
    topics and queues, or Java CDI components these should be injected using
    the resource injection facilities provided by TorqueBox (see <xref
    linkend="resource-injection" />).</para>

    <para>In order for resource injection to function with scheduled jobs,
    they must reside either at the root of your application directory (typical
    for simple Rack applications), or underneath an
    <filename>app/jobs/</filename> directory. If you place the job any where
    else, it may still funciton, but resources injection will not be
    available.</para>
  </section>
</chapter>
