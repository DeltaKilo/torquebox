<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="deployment-descriptors">
  <title>Deployment Descriptors</title>

  <para>TorqueBox applications contain one central, but optional deployment
  descriptor. A deployment descriptor is simply a configuration file that
  affects how your components are woven together at deployment time. The
  primary deployment descriptor used by TorqueBox is known as
  <filename>torquebox.yml</filename>.</para>

  <para>The deployment descriptor may be placed inside your application so
  that it is entirely self-contained. Alternatively, an additional descriptor
  may be used outside of your application, overriding portions of the
  descriptor contained within the application.</para>

  <para>Each subsystem within TorqueBox may contribute one or more
  configurable sections to the descriptor. For more information on the variuos
  subsystem descriptor sections, please see: <xref linkend="messaging" />,
  <xref linkend="scheduled-jobs" />, and <xref linkend="pooling" />.</para>

  <section id="external-and-internal-descriptors">
    <title>External and Internal descriptors</title>

    <para>Deployment descriptors are small, YAML-formatted text files. They
    may be "external", residing outside the application, or "internal",
    residing within it.</para>

    <para>An <emphasis>external</emphasis> descriptor references an
    application somewhere on your filesystem. To deploy the application, the
    descriptor is placed in the
    <filename>$JBOSS_HOME/server/$JBOSS_CONF/deploy/</filename> directory of
    the TorqueBox server. The external descriptor's name should have a suffix
    of <filename>-knob.yml</filename> .</para>

    <para>An <emphasis>internal</emphasis> descriptor should be named
    <filename>torquebox.yml</filename> and reside inside the application's
    <filename>config/</filename> directory, if present, otherwise at the root.
    Internal descriptors allow you to override the TorqueBox defaults but only
    for a single app. As such, they are not required. Values in the external
    descriptor override those in the internal descriptor which, in turn,
    override the TorqueBox defaults. The syntax for all application deployment
    descriptor files is identical.</para>
  </section>

  <section id="contents-of-deployment-descriptors">
    <title>Contents of the descriptor</title>

    <para>The descriptor has several sections, grouped by subsystem,
    represented as top-level keys in a YAML associative array.</para>

    <orderedlist spacing="compact">
      <listitem>
        <para><varname>application</varname>: General application
        configuration</para>
      </listitem>

      <listitem>
        <para><varname>web</varname>: Web-specific configuration</para>
      </listitem>

      <listitem>
        <para><varname>ruby</varname>: Runtime version and JIT
        options</para>
      </listitem>

      <listitem>
        <para><varname>environment</varname>: Environment variables</para>
      </listitem>

      <listitem>
        <para><varname>jobs</varname>: Scheduled</para>
      </listitem>

      <listitem>
        <para><varname>messaging</varname>: Advanced message-handling</para>
      </listitem>

      <listitem>
        <para><varname>pooling</varname>: Runtime pooling control</para>
      </listitem>

      <listitem>
        <para><varname>services</varname>: low-level service daemons</para>
      </listitem>
    </orderedlist>

    <section id="general-application-config-in-descriptor">
      <title>General Application Configuration</title>

      <formalpara>
        <title>Location &amp; Environment</title>

        <para>The application section describes the location and environment
        for the app itself, in Rails terms: <envar>RAILS_ROOT</envar> and
        <envar>RAILS_ENV</envar>. Under traditional (mongrel, lighttpd)
        deployments, this information is picked up through the current working
        directory or environment variables. Since the TorqueBox Server runs
        from a different location, the current working directory has no
        meaning. Likewise, as multiple applications may be deployed within a
        single TorqueBox Server, a single global environment variable to set
        <envar>RAILS_ENV</envar> is nonsensical.</para>
      </formalpara>

      <table>
        <title>application</title>

        <tgroup cols="3">
          <colspec align="left" />

          <thead>
            <row>
              <entry>Variable</entry>

              <entry>Description</entry>

              <entry>Default</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><varname>root</varname>|<varname>RAILS_ROOT</varname>|<varname>RACK_ROOT</varname></entry>

              <entry>Indicates the location of your application. It may refer
              to either an "exploded" application (a directory) or the path to
              a zipped archive. It is required for external descriptors and
              ignored in an internal descriptor. Regardless of which alias you
              use, RAILS_ROOT will be set in the ENV hash for Rails apps and
              RACK_ROOT will be set for Rack apps.</entry>

              <entry><emphasis>none</emphasis></entry>
            </row>

            <row>
              <entry><varname>env</varname>|<varname>RAILS_ENV</varname>|<varname>RACK_ENV</varname></entry>

              <entry>Defines the environment under which the app and its
              framework will run, e.g. production, development, test,
              etc.</entry>

              <entry>development</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>For example: <informalexample>
          <para><programlisting>application:
  root: /path/to/myapp
  env: development</programlisting></para>
        </informalexample></para>
    </section>

    <section id="web-specific-config-in-descriptor">
      <title>Web-specific configuration</title>

      <para>Ruby web apps are often deployed individually, without respect to
      hostnames or context-path. Running under TorqueBox, however, you may
      host several apps under a single host, or multiple apps under different
      hostnames.</para>

      <table>
        <title>web</title>

        <tgroup cols="3">
          <colspec align="left" />

          <thead>
            <row>
              <entry>Variable</entry>

              <entry>Description</entry>

              <entry>Default</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>rackup</entry>

              <entry>The "rackup" script containing the complete logic for
              initializing your application.</entry>

              <entry><filename>config.ru</filename></entry>
            </row>

            <row>
              <entry><varname>host</varname></entry>

              <entry>Virtual hosts allow one application to respond to
              <emphasis>www.host-one.com</emphasis>, while another running
              within the same JBoss AS to respond to
              <emphasis>www.host-two.com</emphasis>. This value can be either
              a single hostname or a YAML list of hostnames.</entry>

              <entry><parameter>localhost</parameter></entry>
            </row>

            <row>
              <entry><varname>context</varname></entry>

              <entry>Applications within a single TorqueBox Server may be
              separated purely by a <emphasis>context path</emphasis>. For a
              given host, the context path is the prefix used to access the
              application, e.g. http://some.host.com/context. Traditional Ruby
              web apps respond from the top of a site, i.e. the root context.
              By using a context path, you can mount applications at a
              location beneath the root.</entry>

              <entry><filename>/</filename></entry>
            </row>

            <row>
              <entry><varname>static</varname></entry>

              <entry>Any static web content provided by your app should reside
              beneath this directory.</entry>

              <entry><emphasis>none</emphasis> unless deploying a Rails
              application, then <filename>public</filename>.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>For example: <informalexample>
          <para><programlisting>web:
  rackup: alternative/path/to/my_config.ru
  context: /app-one
  static: public
  host: www.host-one.com</programlisting></para>
        </informalexample></para>
    </section>

    <section id="ruby-runtime-config-in-descriptor">
      <title>Ruby runtime configuration</title>

      <para>TorqueBox exposes two of the JRuby runtime options: the ruby
      compatibility version, and the JIT compile mode. Both of these options
      are configured in the ruby: section of a deployment descriptor.</para>

      <para>Note that these settings are per application, allowing you to run
      1.8 and 1.9 applications in the same TorqueBox, or have one JIT'ed and
      another not.</para>

      <table>
        <title>ruby</title>

        <tgroup cols="3">
          <colspec align="left" />

          <thead>
            <row>
              <entry>Variable</entry>

              <entry>Description</entry>

              <entry>Default</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><varname>version</varname></entry>

              <entry>The ruby compatibility version for JRuby. Options are:
              <itemizedlist>
                  <listitem>
                    <para>1.8 - provides 1.8.7 compatibility</para>
                  </listitem>

                  <listitem>
                    <para>1.9 - provides 1.9.2 compatibility</para>
                  </listitem>
                </itemizedlist></entry>

              <entry>1.8</entry>
            </row>

            <row>
              <entry><varname>compile_mode</varname></entry>

              <entry>The JIT compile mode for JRuby. Options are:
              <itemizedlist>
                  <listitem>
                    <para>jit - Tells JRuby to use JIT on code where it
                    determines there will be a speed improvement</para>
                  </listitem>

                  <listitem>
                    <para>force - Tells JRuby to use JIT on all code</para>
                  </listitem>

                  <listitem>
                    <para>off - Turns off JIT completely</para>
                  </listitem>
                </itemizedlist></entry>

              <entry><parameter>jit</parameter></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>For example: <informalexample>
          <para><programlisting>ruby:
  version: 1.9
  compile_mode: off</programlisting></para>
        </informalexample></para>
    </section>

    <section id="environment-variables-config-in-descriptor">
      <title>Environment variables</title>

      <para>Each application may have its own unique set of environment
      variables, no matter how many different apps are deployed under a single
      TorqueBox instance. Variables from internal and external descriptors are
      merged, with the external variables overriding any internal matching
      keys.</para>

      <para>For example: <informalexample>
          <para><programlisting>environment:
  MAIL_HOST: mail.yourhost.com
  REPLY_TO: you@yourhost.com</programlisting></para>
        </informalexample></para>

      <para>Any variable set in the environment section is accessible from
      within the Rack app using the ENV hash, e.g.
      ENV['MAIL_HOST']=='mail.yourhost.com'</para>
    </section>
  </section>

  <section id="java-deployment-descriptors">
    <title>Java Deployment Descriptors</title>

    <para>In addition to Ruby, Rails and TorqueBox-specific descriptors, your
    application may also include any traditional JavaEE or JBoss-specific
    descriptors within its <filename>config/</filename> directory.</para>

    <section id="config-web-xml">
      <title>config/web.xml</title>

      <para>A JavaEE <filename>web.xml</filename> deployment descriptor may be
      included in your application's <filename>config/</filename> directory.
      Additional Java Servlets, Filters or other configuration may be
      performed within this file. Its contents will be mixed with other
      information when your application is deployed. If desired, your
      <filename>web.xml</filename> may reference the components that TorqueBox
      implicitly adds.</para>

      <formalpara>
        <title>Rack Filter</title>

        <para>TorqueBox provides a <productname>Java Servlet</productname>
        <classname>Filter</classname> named
        <parameter>torquebox.rack</parameter>. This filter is responsible for
        delegating requests to Rack-based applications.</para>
      </formalpara>

      <formalpara>
        <title>Static Resource Servlet</title>

        <para>In order to serve files from the <filename>public/</filename>
        directory of your application, TorqueBox installs a
        <classname>Servlet</classname> named
        <parameter>torquebox.static</parameter>.</para>
      </formalpara>
    </section>
  </section>
</chapter>
