<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="rack">
  <title>Rack</title>

  <section id="rack-applications">
    <title>Rack Applications</title>

    <para>Rack is a specification which describes how web server engines can
    integrate with additional logic written in Ruby. Rack is a akin to CGI or
    the Java Servlets Spec in terms of goals and functionality.</para>

    <para>TorqueBox currently supports general
    <filename>config.ru</filename>-based applications. In your application's
    directory, your Rack application can be booted from a file named
    <filename>config.ru</filename> that you provide. The Ruby runtime provided
    to your application is quite rudimentary. If you desire to use RubyGems or
    other libraries, it is up to you to require the necessary files (for
    instance, <code>require 'rubygems'</code>).</para>

    <para><programlisting>app = lambda{|env| [ 
          200, 
          { 'Content-Type' =&gt; 'text/html' }, 
          'Hello World'
        ] }
    run app</programlisting></para>

    <para>To deploy your application, please see <xref linkend="deployment" />
    and <xref linkend="deployment-descriptors" />.</para>

    <para>The directory containing the <filename>config.ru</filename> is
    considered the current working directory, and is included in the load
    path.</para>
  </section>

  <section id="rack-frameworks">
    <title>Rack Frameworks</title>

    <para>Many Rack-compatible frameworks and components work right out of the
    box. Various Rack "middleware" may be used, and frameworks such as Sinatra
    run without surprise or modification.</para>
  </section>

  <section id="rack-api">
    <title>Rack API</title>

    <para>TorqueBox aims to provide complete Ruby Rack compatibility. Please
    refer to the Rack specification at <ulink
    url="http://rack.rubyforge.org/doc/SPEC.html"><uri>http://rack.rubyforge.org/doc/SPEC.html</uri></ulink>
    for more information.</para>

    <para>Applications implemented by the user must simply provide an object
    implementing a single-argument method in the form of
    <code><methodname>call</methodname>(<parameter>env</parameter>)</code>.</para>

    <table>
      <title>Rack environment</title>

      <tgroup cols="2">
        <colspec align="left" />

        <thead>
          <row>
            <entry>Variable</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><varname>REQUEST_METHOD</varname></entry>

            <entry>The HTTP request method, such as
            “<parameter>GET</parameter>” or “<parameter>POST</parameter>”.
            This cannot ever be an empty string, and so is always
            required.</entry>
          </row>

          <row>
            <entry><varname>SCRIPT_NAME</varname></entry>

            <entry>The initial portion of the request URL’s “path” that
            corresponds to the application object, so that the application
            knows its virtual “location”. This may be an empty string, if the
            application corresponds to the “root” of the server.</entry>
          </row>

          <row>
            <entry><varname>PATH_INFO</varname></entry>

            <entry>The remainder of the request URL’s “path”, designating the
            virtual “location” of the request’s target within the application.
            This may be an empty string, if the request URL targets the
            application root and does not have a trailing slash. This value
            may be percent-encoded when I originating from a URL.</entry>
          </row>

          <row>
            <entry><varname>QUERY_STRING</varname></entry>

            <entry>The portion of the request URL that follows the
            <code>?</code>, if any.</entry>
          </row>

          <row>
            <entry><varname>SERVER_NAME</varname></entry>

            <entry></entry>
          </row>

          <row>
            <entry><varname>SERVER_PORT</varname></entry>

            <entry></entry>
          </row>

          <row>
            <entry><varname>HTTP_</varname> variables</entry>

            <entry>Variables corresponding to the client-supplied HTTP request
            headers (i.e., variables whose names begin with HTTP_). The
            presence or absence of these variables should correspond with the
            presence or absence of the appropriate HTTP header in the
            request.</entry>
          </row>

          <row>
            <entry><varname>rack.version</varname></entry>

            <entry>The Array [m, n], representing this version of
            Rack.</entry>
          </row>

          <row>
            <entry><varname>rack.url_scheme</varname></entry>

            <entry><parameter>http</parameter> or
            <parameter>https</parameter>, depending on the request
            URL.</entry>
          </row>

          <row>
            <entry><varname>rack.input</varname></entry>

            <entry>Input stream</entry>
          </row>

          <row>
            <entry><varname>rack.errors</varname></entry>

            <entry>Error output stream</entry>
          </row>

          <row>
            <entry><varname>rack.multithread</varname></entry>

            <entry>Always <code>true</code></entry>
          </row>

          <row>
            <entry><varname>rack.multiprocess</varname></entry>

            <entry>Always <code>true</code></entry>
          </row>

          <row>
            <entry><varname>rack.run_once</varname></entry>

            <entry>Always <code>false</code></entry>
          </row>

          <row>
            <entry><varname>rack.session</varname></entry>

            <entry></entry>
          </row>

          <row>
            <entry><varname>rack.logger</varname></entry>

            <entry><emphasis>Not implemented</emphasis></entry>
          </row>

          <row>
            <entry><varname>java.servlet_request</varname></entry>

            <entry>The underlying Java
            <classname>HTTPServletRequest</classname></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
</chapter>
