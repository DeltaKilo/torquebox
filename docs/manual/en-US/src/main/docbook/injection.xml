<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="resource-injection">
  <title>TorqueBox Resource Injection</title>

  <section id="what-is-resource-injection">
    <title>What is Resource Injection?</title>

    <para><emphasis>Resource injection</emphasis> is the term given a software
    architectural strategy that moves the responsibility of finding and
    connecting components to a container, allowing components to remain simple
    and testable. Components declare what they need, and when instantiated by
    the container, the container also satisfies those needs.</para>

    <formalpara>
      <title>What's a resource?</title>

      <para>A resource may be most any component within your application,
      ranging from instances of Java classes, to messaging
      destinations.</para>
    </formalpara>
  </section>

  <section id="basics-of-resource-injection">
    <title>Basics of Resource Injection</title>

    <para>TorqueBox supports injection within the context of jobs,
    services, messaging-handlers, Stomplets and web applications. To
    look up a value from the injection registry, use the
    <methodname>TorqueBox.fetch(...)</methodname> method.</para>

    <para>For instance:</para>

    <para><informalexample>
        <programlisting>class MyService 

  def initialize()
    @queue = TorqueBox.fetch('/queues/new-accounts')
  end

  def that_thing()
    TorqueBox.fetch(com.foo.ThatThing)
  end

end</programlisting>
      </informalexample></para>
  </section>

  <section id="injectable-resources">
    <title>Injectable Resources</title>

    <para>A variety of resources may easily be injected with the
    <methodname>TorqueBox.fetch(...)</methodname> method.</para>

    <formalpara>
      <title>CDI Resources</title>

      <para>The Java Context and Depedency Injection (CDI) spec defines a
      method for managing relationships between components. CDI-enabled
      components may be injected by providing a fully-qualified Java class
      name to the <methodname>TorqueBox.fetch(...)</methodname> method. Typically CDI
      components should be packaged in a JAR archive, and placed in your
      application's <filename>lib/</filename> or
      <filename>vendor/jars/</filename> directory.</para>
    </formalpara>

    <para>TorqueBox uses the JBoss Weld implementation of CDI. Please see the
    <ulink url="http://seamframework.org/Weld">Weld website</ulink> for more
    information.</para>

    <para><informalexample>
        <programlisting>class MyService

  def initialize()
    @java_service = TorqueBox.fetch(com.mycorp.MyJavaService)
  end

end</programlisting>
      </informalexample></para>

    <para>JRuby explicitly supports the simple syntax for common US-centric
    package names starting with <literal>com</literal>,
    <literal>org</literal>, <literal>net</literal>, <literal>java</literal>,
    and javax, amongst others. For other top-level packages based on country
    codes, such as <literal>pl</literal>, <literal>de</literal>, or
    <literal>za</literal>, to perform injection you should reference your
    class through the <classname>Java</classname> ruby package.</para>

    <para><informalexample>
        <para><programlisting>TorqueBox.fetch(Java::pl.softwaremine.PolishingService)</programlisting></para>
      </informalexample></para>

    <note>
      <title>CDI Injection Requires Full Distribution</title>
      <para>You must be running the full distribution of TorqueBox on
      top of JBoss EAP in order to use CDI injection.</para>
    </note>

    <formalpara id="injectable-destinations">
      <title>Messaging Destinations</title>

      <para>Message destinations, such as queues and topics, may be injected
      into your components. If the argument to
      <methodname>TorqueBox.fetch(...)</methodname> includes the string fragment
      <literal>"/queue"</literal> or <literal>"/topic"</literal>, TorqueBox
      will look up the relevant
      <classname>TorqueBox::Messaging::Queue</classname> or
      <classname>TorqueBox::Messaging::Topic</classname>.</para>
    </formalpara>

    <para>Using injection is the preferred method for obtaining a reference to
    a destination, to ensure that your job, service or web application relying
    upon the destination does not begin operation until the destination has
    been completely provisioned.</para>

    <para><informalexample>
        <programlisting>class MyController &lt; ApplicationController

  def create
    notify_topic = TorqueBox.fetch('/topics/new-accounts')
  end

end</programlisting>
      </informalexample></para>

    <formalpara>
      <title>Naming &amp; Directory Entries</title>

      <para>Arbitrary items within the application's naming environment may be
      injected if the argument to <methodname>TorqueBox.fetch(...)</methodname> begins
      with <literal>"java:comp/env"</literal>.</para>
    </formalpara>

    <para><informalexample>
        <programlisting>class MyController &lt; ApplicationController

  def create
    jndi_item = TorqueBox.fetch('java:comp/env/that_thing')
  end

end</programlisting>
      </informalexample></para>

    <formalpara>
      <title>JBoss MSC Services</title>

      <para>JBoss Modular Service Container is the container that drives the
      entire TorqueBox AS. Many components are accessible as MSC Services.
      These may be injected by passing the ServiceName as a string to
      <methodname>TorqueBox.fetch(...)</methodname>.</para>
    </formalpara>

    <para><informalexample>
        <programlisting>class MyController &lt; ApplicationController

  def create
    the_actual_webserver = TorqueBox.fetch('jboss.web')
  end

end</programlisting>
      </informalexample></para>

    <formalpara>
      <title>Services</title>

      <para>TorqueBox Services may be injected into your components if the
      argument to <methodname>TorqueBox.fetch(...)</methodname> begins with
      <literal>"service:"</literal> followed by the key used to configure the
      service in <filename>torquebox.yml</filename>.</para>
    </formalpara>

    <para><informalexample>
        <programlisting>class MyController &lt; ApplicationController

  def stop
    # Service defined with a unique name in torquebox.yml
    the_torque_service = TorqueBox.fetch('service:my_torque_service')
    # Service defined with service class in torquebox.yml
    another_service = TorqueBox.fetch('service:AnotherSerice')
  end

end</programlisting>
      </informalexample></para>
  </section>

  <section id="injection-internals-and-testing">
    <title>Internals and Testing</title>

    <para>At runtime, each <methodname>TorqueBox.fetch(...)</methodname> method looks up
    the injected resource through the
    <classname>TorqueBox::Registry</classname> singleton. In test
    environments, you may desire to populate this registry, using the
    <methodname>merge!(...)</methodname> method, which accepts a key/value
    <classname>Hash</classname>.</para>

    <para>The key for each entry should match either the string argument used
    with <methodname>TorqueBox.fetch(...)</methodname>, or the Ruby version of the Java
    class name, if performing CDI injection. The value should be an
    appropriate object.</para>

    <para>For instance, the Java class of <classname>java.util.Set</classname>
    should be converted into a string of
    <literal>"Java::JavaUtil::Set"</literal> when used as an injection look-up
    key.</para>
  </section>
</chapter>
